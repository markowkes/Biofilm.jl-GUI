import os
import subprocess
import tkinter as tk
from tkinter import filedialog
import numpy as np

import customtkinter
import matplotlib
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

import ParticulateObjectFrame
import ScrollableObjectFrame
import SoluteObjectFrame
import SimulationFrame
import GeometryFrame
import ReactionFrame

import SaveFileBuilder
import FileController
import PlotWindow


class BiofilmApp(customtkinter.CTk):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.set_up_window()
        self.params = self.initialize_parameters()
        self.particulates_arr = []
        self.solutes_arr = []
        #self.reactionSF = None

        self.create_menu()
        self.create_parameter_frame()
        self.create_frames()
        self.bind_events()
        self.mainloop()


    def set_up_window(self):
        customtkinter.set_appearance_mode("System")
        customtkinter.set_default_color_theme("blue")
        self.title("Biofilm.py")
        self.height = self.winfo_screenheight()
        self.width = self.winfo_screenwidth()
        self.geometry("%dx%d+0+0" % (self.width, self.height - 80))
        self.update()


    def initialize_parameters(self):
        #dictionary of parameters, each value is a stringvalue, which is a wrapper around a string which can be put in an entry box widget, and the variable automatically updates the value.
        #enter default values of variables here
        params = {
            "title": customtkinter.StringVar(value=""),
            "run_time": customtkinter.StringVar(value="1"),
            "tolerance": customtkinter.StringVar(value="1e-4"),
            "output_period": customtkinter.StringVar(value="0.1"),
            "volume": customtkinter.StringVar(value="0"),
            "surface_area": customtkinter.StringVar(value="0"),
            "flowrate": customtkinter.StringVar(value="0"),
            "gridpoints": customtkinter.StringVar(value="10"),
            "initial_thickness": customtkinter.StringVar(value="0.1"),
            "layer_thickness": customtkinter.StringVar(value="0.1"),
            "yield_coefficients": np.empty(0), #will hold an np array where rows represent particulates, columns represent solutes. data type is float.
            "file_path": ""
        }
        self.plot_window = None
        return params


    def do_nothing():
        pass


    def create_menu(self):
        menu_frame = customtkinter.CTkFrame(self, width=self.winfo_screenwidth() / 5, height=self.winfo_screenheight() - 40)
        menu_frame.grid(row=0, column=0, pady=5, ipady=40, padx=5, sticky="N")
        menu_frame.grid_propagate(0)

        customtkinter.CTkButton(menu_frame, text="Simulation Parameters", width=(self.winfo_screenwidth() / 5) - 20, command=self.simulation_button_func).grid(row=1, column=0, pady=5, padx=10)
        customtkinter.CTkButton(menu_frame, text="Geometry Parameters", width=(self.winfo_screenwidth() / 5) - 20, command=self.geometry_button_func).grid(row=2, column=0, pady=5, padx=10)
        customtkinter.CTkButton(menu_frame, text="Particulate Parameters", width=(self.winfo_screenwidth() / 5) - 20, command=self.particulate_button_func).grid(row=3, column=0, pady=5, padx=10)
        customtkinter.CTkButton(menu_frame, text="Solute Parameters", width=(self.winfo_screenwidth() / 5) - 20, command=self.solute_button_func).grid(row=4, column=0, pady=5, padx=10)
        customtkinter.CTkButton(menu_frame, text="Reactions", width=(self.winfo_screenwidth() / 5) - 20, command=self.reaction_button_func).grid(row=5, column=0, pady=5, padx=10)
        customtkinter.CTkButton(menu_frame, text="Run Simulation", width=(self.winfo_screenwidth() / 5) - 20, command=self.run_handler).grid(row=6, column=0, pady=50, padx=10, sticky="s")
        customtkinter.CTkButton(menu_frame, text="Test", width=(self.winfo_screenwidth() / 5) - 20, command=self.open_plot_window).grid(row=7, column=0, pady=50, padx=10, sticky="s")


        menubar = tk.Menu(self)
        filemenu = tk.Menu(menubar, tearoff=0)
        filemenu.add_command(label="New", command=self.do_nothing)
        filemenu.add_command(label="Open", command=self.do_nothing)
        filemenu.add_command(label="Save", command=self.do_nothing)
        filemenu.add_command(label="Save as...", command=self.save_as)
        filemenu.add_command(label="Close", command=self.do_nothing)
        filemenu.add_separator()
        filemenu.add_command(label="Exit", command=self.quit)
        menubar.add_cascade(label="File", menu=filemenu)
        self.config(menu=menubar)


    def create_parameter_frame(self):
        self.parameter_frame = customtkinter.CTkFrame(self, height=self.winfo_screenheight(), width=(4 * self.winfo_screenwidth() / 5) - 26)
        self.parameter_frame.grid(row=0, column=1, pady=5, padx=5, sticky="N")
        self.parameter_frame.grid_propagate(0)


    def create_frames(self):
        self.init_simulation_frame()
        self.init_geometry_frame()
        self.particulate_frame = customtkinter.CTkFrame(self.parameter_frame, height=self.winfo_screenheight(), width=(4 * self.winfo_screenwidth() / 5) - 60)
        self.init_particulate_frame()
        self.solute_frame = customtkinter.CTkFrame(self.parameter_frame, height=self.winfo_screenheight(), width=(4 * self.winfo_screenwidth() / 5) - 60)
        self.init_solute_frame()
        self.reaction_frame = customtkinter.CTkFrame(self.parameter_frame, height=self.winfo_screenheight(), width=(4 * self.winfo_screenwidth() / 5) - 60)
        

    def save_as(self):
        kinetics = self.reactionSF.getKinetics()
        SFB = SaveFileBuilder.SaveFileBuilder(self.params, self.particulates_arr, self.solutes_arr, kinetics)
        content = SFB.makeSaveFileContent()
        controller = FileController.FileController()
        file_path = controller.saveAs(content)
        self.params['file_path'] = file_path


    def clearParameterFrame(self):
        self.simulation_frame.grid_forget()
        self.geometry_frame.grid_forget()
        self.particulate_frame.grid_forget()
        self.solute_frame.grid_forget()
        self.reaction_frame.grid_forget()
    

    def bind_events(self):
        self.bind('<Destroy>', self.quitting)


    #Initializing different side menu options:
    def init_simulation_frame(self):
        self.simulation_frame = SimulationFrame.SimulationFrame(params=self.params, parent=self.parameter_frame, height=self.winfo_screenheight(), width=(4 * self.winfo_screenwidth() / 5) - 60)


    def init_geometry_frame(self):
        self.geometry_frame = GeometryFrame.GeometryFrame(params=self.params, parent=self.parameter_frame, height=self.winfo_screenheight(), width=(4 * self.winfo_screenwidth() / 5) - 60)


    def init_particulate_frame(self):
        self.ParticulateSOF = ScrollableObjectFrame.ScrollableObjectFrame(self.params, self.particulate_frame, self.particulates_arr, False, height = self.winfo_screenheight()-20, width = ((4*self.winfo_screenwidth())/5)-50)
        self.ParticulateSOF.grid(row = 0, column = 0)


    def init_solute_frame(self):
        self.SoluteSOF = ScrollableObjectFrame.ScrollableObjectFrame(self.params, self.solute_frame, self.solutes_arr, True, height = self.winfo_screenheight()-20, width = ((4*self.winfo_screenwidth())/5)-50)
        self.SoluteSOF.grid(row = 0, column = 0)
    

    def init_reaction_frame(self):
        self.reactionSF = ReactionFrame.ReactionFrame(self.reaction_frame, self.params, self.solutes_arr, self.particulates_arr,height = self.winfo_screenheight()-20, width = ((4*self.winfo_screenwidth())/5)-50) #ReactionSF = reactionScrollableFrame
        self.reactionSF.grid(row = 0, column = 0)


    #Functions for side menu buttons:
    def simulation_button_func(self):
        self.clearParameterFrame()
        self.simulation_frame.grid(row = 0, column = 0, pady = 5, padx = 5, ipadx = 5, ipady = 3) 


    def geometry_button_func(self):
        self.clearParameterFrame()
        self.geometry_frame.grid(row = 0, column = 0, pady = 5, padx = 5, ipadx = 5, ipady = 3) 


    def particulate_button_func(self):
        self.clearParameterFrame()
        self.particulate_frame.grid(row = 0, column = 0, pady = 5, padx = 5, ipadx = 5, ipady = 3)


    def solute_button_func(self):
        self.clearParameterFrame()
        self.solute_frame.grid(row = 0, column = 0, pady = 5, padx = 5, ipadx = 5, ipady = 3) 


    def reaction_button_func(self):
        self.clearParameterFrame()
        self.init_reaction_frame()
        self.reaction_frame.grid(row = 0, column = 0, pady = 5, padx = 5, ipadx = 5, ipady = 3)
        self.reactionSF.update() 


    def run_handler(self): #called when 'run simulation' is pressed
        return_val, content = self.run_julia_script()
        #return_val == 1 if no error running the file
        if return_val == 1:
            self.open_plot_window()

    def open_plot_window(self):
        if self.plot_window is None or not self.plot_window.winfo_exists():
            self.plot_window = PlotWindow.PlotWindow(self)  # create window if its None or destroyed
            self.plot_window.focus()
        else:
            self.plot_window.focus()  # if window exists focus it


    def run_julia_script(self):
        # Function to run Julia script
        print("RUNNING SCRIPT")
        try:
            # Run the Julia script as a subprocess and capture its output
            completed_process = subprocess.run(['julia', self.params["file_path"]], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            
            # Access the output and error streams
            output = completed_process.stdout
            error = completed_process.stderr

            # Handle the output as needed
            if output:
                print("Output:", output)
            if error:
                print("Error:", error)
            return 1, output
        except subprocess.CalledProcessError as e:
            print(f"Error running Julia script: {e}")
            return 0, 0
       

    def quitting(self, event):
        customtkinter.CTk.quit(self)

#if __name__ == "__main__":
#    app = BiofilmApp()
#    app.mainloop()

app = BiofilmApp()
app.mainloop()