import os
import subprocess
import tkinter as tk
from tkinter import filedialog

import customtkinter
import matplotlib
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

import ParticulateObjectFrame
import ScrollableObjectFrame
import SoluteObjectFrame
import SimulationFrame
import GeometryFrame


class BiofilmApp:
    def __init__(self):
        self.root = customtkinter.CTk()
        self.set_up_window()
        self.params = self.initialize_parameters()
        self.particulates_arr = []
        self.solutes_arr = []
        self.particulate_count = 0
        self.solutes_count = 0

        self.create_menu()
        self.create_parameter_frame()
        self.create_frames(parameter_frame=self.parameter_frame)
        self.bind_events()

    def set_up_window(self):
        customtkinter.set_appearance_mode("System")
        customtkinter.set_default_color_theme("blue")
        self.root.title("Biofilm.py")
        height = self.root.winfo_screenheight()
        width = self.root.winfo_screenwidth()
        self.root.geometry("%dx%d+0+0" % (width, height - 80))
        self.root.update()

    def initialize_parameters(self):
        params = {
            "title": customtkinter.StringVar(value=""),
            "run_time": customtkinter.StringVar(value="1"),
            "tolerance": customtkinter.StringVar(value="1e-4"),
            "output_period": customtkinter.StringVar(value="0.1"),
            "volume": customtkinter.StringVar(value="0"),
            "surface_area": customtkinter.StringVar(value="0"),
            "flowrate": customtkinter.StringVar(value="0"),
            "gridpoints": customtkinter.StringVar(value="0"),
            "initial_thickness": customtkinter.StringVar(value="0"),
            "layer_thickness": customtkinter.StringVar(value="0"),
            "file_path": ""
        }
        return params

    def do_nothing():
        pass

    def create_menu(self):
        menu_frame = customtkinter.CTkFrame(self.root, width=self.root.winfo_screenwidth() / 5, height=self.root.winfo_screenheight() - 40)
        menu_frame.grid(row=0, column=0, pady=5, ipady=40, padx=5, sticky="N")
        menu_frame.grid_propagate(0)

        customtkinter.CTkButton(menu_frame, text="Simulation Parameters", width=(self.root.winfo_screenwidth() / 5) - 20, command=self.simulation_button_func).grid(row=1, column=0, pady=5, padx=10)
        customtkinter.CTkButton(menu_frame, text="Geometry Parameters", width=(self.root.winfo_screenwidth() / 5) - 20, command=self.geometry_button_func).grid(row=2, column=0, pady=5, padx=10)
        customtkinter.CTkButton(menu_frame, text="Particulate Parameters", width=(self.root.winfo_screenwidth() / 5) - 20, command=self.particulate_button_func).grid(row=3, column=0, pady=5, padx=10)
        customtkinter.CTkButton(menu_frame, text="Solute Parameters", width=(self.root.winfo_screenwidth() / 5) - 20, command=self.solute_button_func).grid(row=4, column=0, pady=5, padx=10)
        customtkinter.CTkButton(menu_frame, text="Reactions", width=(self.root.winfo_screenwidth() / 5) - 20, command=self.reaction_button_func).grid(row=5, column=0, pady=5, padx=10)
        customtkinter.CTkButton(menu_frame, text="Run Simulation", width=(self.root.winfo_screenwidth() / 5) - 20, command=self.run_julia_script).grid(row=6, column=0, pady=50, padx=10, sticky="s")

        menubar = tk.Menu(self.root)
        filemenu = tk.Menu(menubar, tearoff=0)
        filemenu.add_command(label="New", command=self.do_nothing)
        filemenu.add_command(label="Open", command=self.do_nothing)
        filemenu.add_command(label="Save", command=self.do_nothing)
        filemenu.add_command(label="Save as...", command=self.save_as)
        filemenu.add_command(label="Close", command=self.do_nothing)
        filemenu.add_separator()
        filemenu.add_command(label="Exit", command=self.root.quit)
        menubar.add_cascade(label="File", menu=filemenu)
        self.root.config(menu=menubar)

    def create_parameter_frame(self):
        self.parameter_frame = customtkinter.CTkFrame(self.root, height=self.root.winfo_screenheight(), width=(4 * self.root.winfo_screenwidth() / 5) - 26)
        self.parameter_frame.grid(row=0, column=1, pady=5, padx=5, sticky="N")
        self.parameter_frame.grid_propagate(0)

    def create_frames(self, parameter_frame):
        self.init_simulation_frame()
        self.init_geometry_frame()
        self.particulate_frame = customtkinter.CTkFrame(parameter_frame, height=self.root.winfo_screenheight(), width=(4 * self.root.winfo_screenwidth() / 5) - 60)
        self.init_particulate_frame()
        self.solute_frame = customtkinter.CTkFrame(parameter_frame, height=self.root.winfo_screenheight(), width=(4 * self.root.winfo_screenwidth() / 5) - 60)
        self.init_solute_frame()

    def save_as(self):
        content = self.make_save_file_content()
        current_dir = os.path.dirname(__file__)
        file_path = filedialog.asksaveasfilename(initialdir=current_dir + '../Saves',
                                                  defaultextension=".jl",
                                                  filetypes=[("Julia file", "*.jl")])

        if file_path:
            with open(file_path, 'w') as f:
                f.write(content)
                self.params["file_path"] = file_path

    def bind_events(self):
        self.root.bind('<Destroy>', self.quitting)

    def init_simulation_frame(self):
        self.simulation_frame = SimulationFrame.SimulationFrame(params=self.params, parent=self.parameter_frame, height=self.root.winfo_screenheight(), width=(4 * self.root.winfo_screenwidth() / 5) - 60)

    def init_geometry_frame(self):
        self.geometry_frame = GeometryFrame.GeometryFrame(params=self.params, parent=self.parameter_frame, height=self.root.winfo_screenheight(), width=(4 * self.root.winfo_screenwidth() / 5) - 60)

    def init_particulate_frame(self):
        self.ParticulateSOF = ScrollableObjectFrame.ScrollableObjectFrame(self.particulate_frame, self.particulates_arr, False, height = height-20, width = ((4*width)/5)-50)
        self.ParticulateSOF.grid(row = 0, column = 0)

    def init_solute_frame(self):
        # Initialization code for solute frame
        pass

    def simulation_button_func(self):
        # Event handler for simulation button
        pass

    def geometry_button_func(self):
        # Event handler for geometry button
        pass

    def particulate_button_func(self):
        # Event handler for particulate button
        pass

    def solute_button_func(self):
        # Event handler for solute button
        pass

    def reaction_button_func(self):
        # Event handler for reaction button
        pass

    def run_julia_script(self):
        # Function to run Julia script
        pass

    def add_new_particulate(self):
        # Function to add a new particulate
        pass

    def add_new_solute(self):
        # Function to add a new solute
        pass

    def make_save_file_content(self):
        # Function to generate content for save file
        pass
       
    def start(self):
        self.root.mainloop()

    def quitting(self, event):
        customtkinter.CTk.quit(self.root)

if __name__ == "__main__":
    app = BiofilmApp()
    app.start()